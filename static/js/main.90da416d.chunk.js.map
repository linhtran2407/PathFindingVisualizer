{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathFindingVisualizer/PathFindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","distance","visitedNodesInOrder","unvisitedNodes","nodes","node","push","getAllNodes","length","sort","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","unvisitedNeighbors","neighbors","filter","nei","getUnvisitedNeighbors","previousNode","a","b","PathFindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","current","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90da416d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Node.css';\n\nexport default class Node extends Component {\n    render() {\n        const {\n            col,\n            isFinish,\n            isStart,\n            isWall,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            row,\n          } = this.props;\n          const extraClassName = isFinish\n            ? 'node-finish'\n            : isStart\n            ? 'node-start'\n            : isWall\n            ? 'node-wall'\n            : '';\n      \n          return (\n            <div\n              id={`node-${row}-${col}`}\n              className={`node ${extraClassName}`}\n              onMouseDown={() => onMouseDown(row, col)}\n              onMouseEnter={() => onMouseEnter(row, col)}\n              onMouseUp={() => onMouseUp()}></div>\n          );\n    }\n}\n\n","// Dijkstra's algorithm: returns *all* nodes in the order in which they were visited. \n// Constantly calculate and update the shortest path at each visit\n// Also makes nodes point back to their previous node, effectively allowing us to \n// compute the shortest path by backtracking from the finish node.\n\nexport function dijkstra(grid, startNode, finishNode) {\n    startNode.distance = 0\n    const visitedNodesInOrder = []\n    const unvisitedNodes = getAllNodes(grid)\n\n    while(!!unvisitedNodes.length){\n        // get the min (closest node) and re-heapify to maintain min-heap structure\n        sort(unvisitedNodes)\n        const closestNode = unvisitedNodes.shift()\n\n        // skip if meet the wall\n        if (closestNode.isWall) continue\n\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n        // mark as visited and push into the array\n        closestNode.isVisited = true\n        visitedNodesInOrder.push(closestNode)\n\n        // if meet the target\n        if (closestNode === finishNode){\n            return visitedNodesInOrder\n        }\n\n        // else update the visited nodes by incrementing the distance of \n        // neighbors node by 1\n        updateUnvisitedNeighbors(closestNode, grid)\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = []\n    const {col, row} = node\n    // check for validity of each coordinate\n    if (row>0) {neighbors.push(grid[row-1][col])}\n    if (col>0) {neighbors.push(grid[row][col-1])}\n    if (row<grid.length-1) {neighbors.push(grid[row+1][col])}\n    if (col<grid[0].length-1) {neighbors.push(grid[row][col+1])}\n    return neighbors.filter(nei => !nei.isVisited)\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid)\n    for (const nei of unvisitedNeighbors){\n        nei.distance = node.distance+1\n        nei.previousNode = node\n    }\n}\n\nfunction getAllNodes(grid){\n    const nodes = []\n    for (const row of grid){\n        for (const node of row){\n            nodes.push(node)\n        }\n    }\n    return nodes\n}\n\nfunction sort(unvisitedNodes) {\n    unvisitedNodes.sort((a,b) => a.distance - b.distance)\n}\n\n// function dequeue(unvisitedNodes){\n//     if (unvisitedNodes.length === 0) {return null}\n//     // store and return the min of the heap\n//     const min = unvisitedNodes[0]\n\n//     /** re-heapify */ \n//     // pop the last val and set as the new node\n//     const end = unvisitedNodes.shift()\n//     if (unvisitedNodes.length > 0){\n//         unvisitedNodes[0] = end\n\n//         let index = 0\n//         const length = unvisitedNodes.length\n//         const element = unvisitedNodes[index]\n\n//         while(true){\n//             let leftIndex = index*2 + 1\n//             let rightIndex = index*2 + 2\n//             let rightChild, leftChild\n//             let swap = null\n\n//             // check if left child is valid\n//             if (leftIndex < length){\n//                 // swap if satisfied\n//                 leftChild = unvisitedNodes[leftIndex]\n//                 if(element.distance > leftChild.distance){\n//                     swap = leftIndex\n//                 }\n//             }\n\n//             // check if right child is valid\n//             if (rightIndex < length){\n//                 rightChild = unvisitedNodes[rightIndex]\n//                 // if no swap made and right child is less prioritized than the current node\n//                 // or there is a swap but the right is less prioritized than the left\n//                 if ((swap === null && element.distance > rightChild.distance) || \n//                     (swap !== null && rightChild.distance < leftChild.distance)){\n//                     swap = rightIndex\n//                 }\n//             }\n\n//             // stopping condition: when there is no swap could be made\n//             if (swap === null) break\n//             // else swap\n//             unvisitedNodes[index] = unvisitedNodes[swap]\n//             unvisitedNodes[swap] = element\n\n//             // update index to continue checking\n//             index = swap\n//         }\n//     }\n\n//     return min\n// }\n\n// function enqueue(nodes, node) {\n//     nodes.push(node)\n\n//     // store the new node's index and value\n//     let index = nodes.length-1\n//     const element = nodes[index]\n\n//     while(index>0){\n//         // store the new node's parent's index and value\n//         const parentIndex = Math.floor((index+1)/2)\n//         const parent = nodes[parentIndex]\n\n//         // compare distance then heapify\n//         // if found the correct place, break\n//         if (element.distance >= parent.distance){break}\n//         // else swap parent and new node\n//         nodes[index] = parent\n//         nodes[parentIndex] = element\n//         // update the index to continue heapifying\n//         index = parentIndex\n//     }\n// }\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = []\n    let current = finishNode\n    while(current !== null){\n        nodesInShortestPathOrder.push(current)\n        current = current.previousNode\n    }\n\n    return nodesInShortestPathOrder\n}\n","import React, { Component } from 'react'\nimport Node from './Node/Node'\nimport './PathFindingVisualizer.css'\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathFindingVisualizer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            grid: [], // arrays of nodes for cells in grid\n            mouseIsPressed: false, // when press the mouse, used when create wall\n        }\n    }\n\n    componentDidMount() {\n        const grid = getInitialGrid()\n        this.setState({grid})\n    }\n\n    // mouse down is when we press, but not release, the mouse\n    // we want the node to be toggled into wall \n    handleMouseDown(row, col){\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col)\n        this.setState({grid: newGrid, mouseIsPressed: true})\n    }\n\n    // enter is when we pressed the mouse already and are hovering\n    // through the grid\n    handleMouseEnter(row, col){\n        // we dont want to toggle every cell into wall when we are hovering \n        // but not pressing the mouse\n        if (!this.state.mouseIsPressed) {return}\n\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col)\n        this.setState({grid: newGrid})\n    }\n\n    handleMouseUp(){\n        this.setState({mouseIsPressed: false})\n    }\n\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i=0; i<=visitedNodesInOrder.length; i++){\n            // if reach the finish node, animate the shortest path\n            if (i === visitedNodesInOrder.length){\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder)\n                }, 10*i);\n                return\n            }\n            // meanwhile, just show the path\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i]\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                'node node-visited';\n            }, 10*i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i=0; i<nodesInShortestPathOrder.length; i++){\n        setTimeout(() => {\n            const node = nodesInShortestPathOrder[i]\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n        }, 35 * i);\n        }\n    }\n\n    visualizeDijkstra() {\n        const {grid} = this.state\n        const startNode = grid[START_NODE_ROW][START_NODE_COL]\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL]\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode)\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode)\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    render() {\n        const {grid, mouseIsPressed} = this.state;\n\n        return (\n            <>\n            <button onClick={() => this.visualizeDijkstra()}>\n            Visualize Dijkstra's Algorithm\n            </button>\n            <div className=\"grid\">\n                {grid.map((row, rowIdx) => {\n                    return (\n                    <div key={rowIdx}>\n                        {row.map((node, nodeIdx) => {\n                            const {row, col, isFinish, isStart, isWall} = node;\n                            return (<Node\n                            key={nodeIdx}\n                            col={col}\n                            isStart={isStart}\n                            isFinish={isFinish}\n                            isWall={isWall}\n                            onMouseDown = {(row, col) => this.handleMouseDown(row, col)}\n                            onMouseEnter = {(row, col) => this.handleMouseEnter(row, col)}\n                            onMouseUp = {(row, col) => this.handleMouseUp(row, col)}\n                            mouseIsPressed={mouseIsPressed}\n                            row={row}></Node>)\n                        })}\n                    </div>\n                    )\n                })}\n            </div>\n            </>\n        )\n    }\n}\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n};\n\n\nconst createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n};\n\n\n// toggle the grid into a wall\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice()\n    const node = newGrid[row][col]\n    const newNode = {\n        ...node,\n        isWall: !node.isWall\n    }\n\n    newGrid[row][col] = newNode\n    return newGrid\n}","import React from 'react';\nimport './App.css';\nimport PathFindingVisualizer from './PathFindingVisualizer/PathFindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFindingVisualizer></PathFindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}